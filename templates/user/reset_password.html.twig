{% extends 'base.html.twig' %}

{% block title %}Réinitialisation du mot de passe - {{ parent() }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        .card-reset {
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            animation: fadeInUp 0.5s ease-out;
        }
        
        .card-reset:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }
        
        .reset-icon {
            width: 100px;
            height: 100px;
            background-color: rgba(220, 53, 69, 0.1);
            color: #dc3545;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
            font-size: 40px;
            transition: all 0.5s ease;
        }
        
        .reset-icon:hover {
            transform: rotateY(180deg);
            background-color: rgba(220, 53, 69, 0.2);
        }
        
        .password-container {
            position: relative;
        }
        
        .password-toggle {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #dc3545;
            z-index: 10;
        }
        
        .password-toggle:hover {
            color: #bd2130;
        }
        
        .password-strength {
            height: 5px;
            margin-top: 10px;
            border-radius: 5px;
            transition: all 0.3s ease;
        }
        
        .strength-weak {
            width: 30%;
            background-color: #dc3545;
        }
        
        .strength-medium {
            width: 60%;
            background-color: #dc3545;
            opacity: 0.7;
        }
        
        .strength-strong {
            width: 100%;
            background-color: #dc3545;
        }
        
        .btn-reset {
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            font-weight: 600;
            letter-spacing: 1px;
            background-color: #dc3545;
            border-color: #dc3545;
        }
        
        .btn-reset:hover {
            background-color: #c82333;
            border-color: #bd2130;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(220, 53, 69, 0.3);
        }
        
        .btn-reset:before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: all 0.6s;
        }
        
        .btn-reset:hover:before {
            left: 100%;
        }
        
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translate3d(0, 30px, 0);
            }
            to {
                opacity: 1;
                transform: translate3d(0, 0, 0);
            }
        }
        
        .fadeInUp {
            animation: fadeInUp 0.5s ease-out;
        }
        
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
            20%, 40%, 60%, 80% { transform: translateX(5px); }
        }
        
        .shake {
            animation: shake 0.8s cubic-bezier(.36,.07,.19,.97) both;
        }
        
        /* Styles pour tous les éléments */
        .form-label {
            font-weight: 600;
            color: #212529; /* Noir au lieu de rouge */
            margin-bottom: 0.5rem;
        }
        
        .form-control:focus {
            border-color: rgba(220, 53, 69, 0.5);
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }
        
        a {
            color: #dc3545;
            text-decoration: none;
            transition: all 0.3s ease;
        }
        
        a:hover {
            color: #bd2130;
            text-decoration: underline;
        }
        
        .text-danger {
            color: #dc3545 !important;
        }
        
        /* Text color override */
        p, .card-body, label, small {
            color: #212529 !important; /* Texte noir */
        }
        
        small.form-text {
            color: #6c757d !important; /* Texte gris pour les petits textes d'aide */
        }
        
        #password-feedback, #match-feedback {
            color: #6c757d !important;
        }
    </style>
{% endblock %}

{% block body %}
<section class="heathy_section layout_padding">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card shadow card-reset">
                    <div class="card-header bg-danger text-white text-center">
                        <h3 class="mb-0">Réinitialiser le mot de passe</h3>
                    </div>
                    <div class="card-body p-4">
                        <div class="reset-icon mb-4">
                            <i class="fas fa-lock"></i>
                        </div>
                        
                        <p class="text-muted mb-4 text-center text-dark">Veuillez entrer votre nouveau mot de passe</p>

                        {{ form_start(resetPasswordForm, {'attr': {'id': 'reset-form'}}) }}
                            <div class="mb-3">
                                <label for="{{ resetPasswordForm.plainPassword.first.vars.id }}" class="form-label">
                                    <i class="fas fa-key text-danger me-2"></i> Nouveau mot de passe
                                </label>
                                <div class="password-container">
                                    {{ form_widget(resetPasswordForm.plainPassword.first, {
                                        'attr': {
                                            'class': 'form-control',
                                            'placeholder': 'Entrez votre nouveau mot de passe',
                                            'autocomplete': 'new-password',
                                            'id': 'password'
                                        }
                                    }) }}
                                    <span class="password-toggle" id="password-toggle">
                                        <i class="fas fa-eye"></i>
                                    </span>
                                </div>
                                <div class="password-strength mt-2" id="password-strength"></div>
                                <small id="password-feedback" class="form-text text-muted"></small>
                                <div class="form-error text-danger">
                                    {{ form_errors(resetPasswordForm.plainPassword.first) }}
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="{{ resetPasswordForm.plainPassword.second.vars.id }}" class="form-label">
                                    <i class="fas fa-check-circle text-danger me-2"></i> Confirmer le mot de passe
                                </label>
                                <div class="password-container">
                                    {{ form_widget(resetPasswordForm.plainPassword.second, {
                                        'attr': {
                                            'class': 'form-control',
                                            'placeholder': 'Confirmez votre nouveau mot de passe',
                                            'autocomplete': 'new-password',
                                            'id': 'confirm-password'
                                        }
                                    }) }}
                                    <span class="password-toggle" id="confirm-toggle">
                                        <i class="fas fa-eye"></i>
                                    </span>
                                </div>
                                <div id="match-feedback" class="form-text mt-2"></div>
                                <div class="form-error text-danger">
                                    {{ form_errors(resetPasswordForm.plainPassword.second) }}
                                </div>
                            </div>

                            <div class="d-grid gap-2 mb-4">
                                <button type="submit" class="btn btn-danger btn-lg btn-block btn-reset" id="submit-button">
                                    <i class="fas fa-check-circle me-2"></i> Réinitialiser le mot de passe
                                </button>
                                <a href="{{ path('app_login') }}" class="btn btn-outline-danger">
                                    <i class="fas fa-arrow-left me-2"></i> Retour à la connexion
                                </a>
                            </div>
                        {{ form_end(resetPasswordForm) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.all.min.js"></script>
    
    {# Stocker les messages flash dans des attributs data sur un div caché #}
    <div id="flash-messages" style="display:none;" 
        data-success='{% if app.flashes('success') is defined %}{{ app.flashes('success')|json_encode|e('html_attr') }}{% else %}[]{% endif %}'
        data-error='{% if app.flashes('danger') is defined %}{{ app.flashes('danger')|json_encode|e('html_attr') }}{% else %}[]{% endif %}'
        data-warning='{% if app.flashes('warning') is defined %}{{ app.flashes('warning')|json_encode|e('html_attr') }}{% else %}[]{% endif %}'>
    </div>
    
    <script>
        // Script pur JavaScript sans mélange avec Twig
        document.addEventListener('DOMContentLoaded', function() {
            // Récupération des messages flash à partir des attributs data
            const flashContainer = document.getElementById('flash-messages');
            
            if (flashContainer) {
                // Récupérer et afficher les messages de succès
                try {
                    const successMessages = JSON.parse(flashContainer.getAttribute('data-success') || '[]');
                    successMessages.forEach(function(message) {
                        Swal.fire({
                            title: 'Succès!',
                            text: message,
                            icon: 'success',
                            confirmButtonColor: '#dc3545'
                        });
                    });
                    
                    const errorMessages = JSON.parse(flashContainer.getAttribute('data-error') || '[]');
                    errorMessages.forEach(function(message) {
                        Swal.fire({
                            title: 'Erreur!',
                            text: message,
                            icon: 'error',
                            confirmButtonColor: '#dc3545'
                        });
                    });
                    
                    const warningMessages = JSON.parse(flashContainer.getAttribute('data-warning') || '[]');
                    warningMessages.forEach(function(message) {
                        Swal.fire({
                            title: 'Attention!',
                            text: message,
                            icon: 'warning',
                            confirmButtonColor: '#dc3545'
                        });
                    });
                } catch (e) {
                    console.error('Erreur parsing flash messages:', e);
                }
            }
            
            // Gestion des éléments de mot de passe
            const passwordInput = document.getElementById('password');
            const confirmInput = document.getElementById('confirm-password');
            const passwordToggle = document.getElementById('password-toggle');
            const confirmToggle = document.getElementById('confirm-toggle');
            const passwordStrength = document.getElementById('password-strength');
            const passwordFeedback = document.getElementById('password-feedback');
            const matchFeedback = document.getElementById('match-feedback');
            const submitButton = document.getElementById('submit-button');
            const resetForm = document.getElementById('reset-form');
            
            // Fonction pour basculer la visibilité du mot de passe
            function togglePasswordVisibility(inputField, toggleIcon) {
                if (!inputField || !toggleIcon) return;
                
                if (inputField.type === "password") {
                    inputField.type = "text";
                    toggleIcon.querySelector('i').classList.remove('fa-eye');
                    toggleIcon.querySelector('i').classList.add('fa-eye-slash');
                } else {
                    inputField.type = "password";
                    toggleIcon.querySelector('i').classList.remove('fa-eye-slash');
                    toggleIcon.querySelector('i').classList.add('fa-eye');
                }
            }
            
            // Écouteurs pour le toggle de visibilité
            if (passwordToggle) {
                passwordToggle.addEventListener('click', function() {
                    togglePasswordVisibility(passwordInput, this);
                });
            }
            
            if (confirmToggle) {
                confirmToggle.addEventListener('click', function() {
                    togglePasswordVisibility(confirmInput, this);
                });
            }
            
            // Vérification de la force du mot de passe
            function checkPasswordStrength(password) {
                if (!password) return 0;
                
                let strength = 0;
                
                // Longueur minimale
                if (password.length >= 8) strength += 1;
                
                // Complexité
                if (password.match(/[a-z]/) && password.match(/[A-Z]/)) strength += 1;
                if (password.match(/\d/)) strength += 1;
                if (password.match(/[^a-zA-Z\d]/)) strength += 1;
                
                return strength;
            }
            
            // Mise à jour de l'indicateur visuel de force du mot de passe
            function updatePasswordStrengthIndicator() {
                if (!passwordInput || !passwordStrength || !passwordFeedback) return;
                
                const password = passwordInput.value;
                const strength = checkPasswordStrength(password);
                
                // Réinitialiser les classes
                passwordStrength.className = 'password-strength';
                
                if (password.length === 0) {
                    passwordStrength.style.display = 'none';
                    passwordFeedback.textContent = '';
                } else {
                    passwordStrength.style.display = 'block';
                    
                    if (strength < 2) {
                        passwordStrength.classList.add('strength-weak');
                        passwordFeedback.textContent = 'Mot de passe faible';
                        passwordFeedback.style.color = '#dc3545';
                    } else if (strength < 4) {
                        passwordStrength.classList.add('strength-medium');
                        passwordFeedback.textContent = 'Mot de passe moyen';
                        passwordFeedback.style.color = '#dc3545';
                        passwordFeedback.style.opacity = '0.7';
                    } else {
                        passwordStrength.classList.add('strength-strong');
                        passwordFeedback.textContent = 'Mot de passe fort';
                        passwordFeedback.style.color = '#dc3545';
                    }
                }
            }
            
            // Vérification de la correspondance des mots de passe
            function checkPasswordMatch() {
                if (!passwordInput || !confirmInput || !matchFeedback) return false;
                
                if (passwordInput.value === confirmInput.value) {
                    matchFeedback.textContent = "Les mots de passe correspondent";
                    matchFeedback.style.color = "#dc3545";
                    return true;
                } else {
                    matchFeedback.textContent = "Les mots de passe ne correspondent pas";
                    matchFeedback.style.color = "#dc3545";
                    return false;
                }
            }
            
            // Ajout des écouteurs d'événements
            if (passwordInput) {
                passwordInput.addEventListener('input', function() {
                    updatePasswordStrengthIndicator();
                    
                    if (confirmInput && confirmInput.value) {
                        checkPasswordMatch();
                    }
                });
            }
            
            if (confirmInput) {
                confirmInput.addEventListener('input', function() {
                    checkPasswordMatch();
                });
            }
            
            // Validation du formulaire avant soumission
            if (resetForm) {
                resetForm.addEventListener('submit', function(event) {
                    let isValid = true;
                    
                    // Vérifier si les mots de passe correspondent
                    if (passwordInput && confirmInput && 
                        passwordInput.value && confirmInput.value && 
                        !checkPasswordMatch()) {
                        
                        event.preventDefault();
                        isValid = false;
                        
                        Swal.fire({
                            title: 'Erreur!',
                            text: 'Les mots de passe ne correspondent pas',
                            icon: 'error',
                            confirmButtonColor: '#dc3545'
                        });
                        
                        // Animation d'erreur
                        if (confirmInput) {
                            confirmInput.classList.add('shake');
                            setTimeout(function() { 
                                confirmInput.classList.remove('shake');
                            }, 800);
                        }
                    }
                    
                    // Vérifier la force du mot de passe
                    if (passwordInput && passwordInput.value && 
                        passwordInput.value.length < 8) {
                        
                        event.preventDefault();
                        isValid = false;
                        
                        Swal.fire({
                            title: 'Erreur!',
                            text: 'Le mot de passe doit contenir au moins 8 caractères',
                            icon: 'error',
                            confirmButtonColor: '#dc3545'
                        });
                        
                        // Animation d'erreur
                        if (passwordInput) {
                            passwordInput.classList.add('shake');
                            setTimeout(function() {
                                passwordInput.classList.remove('shake');
                            }, 800);
                        }
                    }
                    
                    return isValid;
                });
            }
        });
    </script>
{% endblock %}
