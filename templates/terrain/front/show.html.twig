{% extends 'base.html.twig' %}

{% block title %}Détails du Terrain - SPORTHIVE{% endblock %}

{% block body %}
<section class="terrain-detail-section layout_padding">
    <div class="container">
        <div class="heading_container mb-5">
            <h2>Détails du Terrain</h2>
        </div>

        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="detail-card">
                    <div class="card-header">
                        <h3>{{ terrain.Nom }}</h3>
                    </div>

                    <div class="card-body">
                        <div class="detail-row">
                            <div class="detail-label">Localisation</div>
                            <div class="detail-value">{{ terrain.Localisation }}</div>
                            <div id="map" style="height: 400px; border-radius: 8px; margin-top: 15px;"></div>
                        </div>

                        <div class="detail-row">
                            <div class="detail-label">Prix</div>
                            <div class="detail-value">{{ terrain.Prix }} TND</div>
                        </div>

                        <div class="detail-row">
                            <div class="detail-label">Type de Surface</div>
                            <div class="detail-value">{{ terrain.TypeSurface }}</div>
                        </div>

                        <div class="detail-row">
                            <div class="detail-label">Image</div>
                            <div class="detail-value">
                                {% if terrain.imageTer %}
                                    <img src="{{ asset('uploads/terrains/' ~ terrain.imageTer) }}" alt="Terrain" class="img-fluid rounded">
                                {% else %}
                                    <p>Aucune image disponible</p>
                                {% endif %}
                            </div>
                        </div>
                    </div>

                    <div class="card-footer">
                        <a href="{{ path('app_terrain_index') }}" class="btn-back">Retour à la liste</a>

                        <!-- Button Modifier -->
                        <a href="{{ path('app_terrain_edit_front', {idTerrain: terrain.idTerrain}) }}" class="btn-edit">Modifier</a>

                        <!-- Formulaire de suppression -->
                        <form action="{{ path('app_terrain_delete_front', {idTerrain: terrain.idTerrain}) }}" method="POST" style="display: inline-block;">
                            <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ terrain.idTerrain) }}">
                            <button type="submit" class="btn-delete" onclick="return confirm('Êtes-vous sûr de vouloir supprimer ce terrain ?');">Supprimer</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
{% endblock %}

{% block css %}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin=""/>
<style>
    .terrain-detail-section {
        padding-top: 120px;
        padding-bottom: 80px;
        background-color: #f8f9fa;
    }

    .heading_container {
        text-align: center;
    }

    .heading_container h2 {
        font-weight: bold;
        color: #252525;
        position: relative;
        padding-bottom: 10px;
    }

    .heading_container h2:after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 60px;
        height: 3px;
        background-color: #ff4f5a;
    }

    .detail-card {
        background-color: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0,0,0,0.08);
    }

    .card-header {
        background-color: #ff4f5a;
        color: white;
        padding: 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .card-header h3 {
        margin: 0;
        font-size: 24px;
    }

    .card-body {
        padding: 30px;
    }

    .detail-row {
        margin-bottom: 20px;
        padding-bottom: 20px;
        border-bottom: 1px solid #eee;
    }

    .detail-row:last-child {
        border-bottom: none;
        margin-bottom: 0;
        padding-bottom: 0;
    }

    .detail-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 5px;
    }

    .detail-value {
        color: #212529;
        font-size: 16px;
    }

    .card-footer {
        background-color: #f8f9fa;
        padding: 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .btn-back {
        padding: 10px 20px;
        border-radius: 5px;
        text-decoration: none;
        font-weight: 500;
        background-color: #6c757d;
        color: white;
        transition: all 0.3s ease;
    }

    .btn-back:hover {
        background-color: #5a6268;
        color: white;
    }

    .btn-edit {
        padding: 10px 20px;
        border-radius: 5px;
        background-color: #ff4f5a;
        color: white;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-edit:hover {
        background-color: #e63946;
    }

    .btn-delete {
        padding: 10px 20px;
        border-radius: 5px;
        background-color: #dc3545;
        color: white;
        border: none;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-delete:hover {
        background-color: #c82333;
    }

    .img-fluid {
        max-width: 100%;
        height: auto;
        border-radius: 10px;
    }

    /* Map styles */
    #map {
        width: 100%;
        height: 400px;
        border-radius: 8px;
        border: 2px solid #dee2e6;
        position: relative;
        z-index: 1;
    }
</style>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
    // Direct inline script to initialize the map
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Detail page map script running');

        setTimeout(function() {
            try {
                const mapElement = document.getElementById('map');
                if (!mapElement) {
                    console.error('Map element not found');
                    return;
                }

                if (typeof L === 'undefined') {
                    console.error('Leaflet not loaded');
                    // Try to load Leaflet dynamically
                    const script = document.createElement('script');
                    script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
                    script.integrity = 'sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=';
                    script.crossOrigin = '';
                    script.onload = initMap;
                    document.head.appendChild(script);
                    return;
                }

                initMap();

                function initMap() {
                    console.log('Initializing detail page map...');

                    // Get coordinates from the terrain.localisation value
                    const localisationText = "{{ terrain.Localisation }}";
                    if (!localisationText) {
                        console.error('No localisation data available');
                        return;
                    }

                    const [lat, lng] = localisationText.split(',');
                    if (!lat || !lng || isNaN(parseFloat(lat)) || isNaN(parseFloat(lng))) {
                        console.error('Invalid localisation format:', localisationText);
                        return;
                    }

                    const latNum = parseFloat(lat);
                    const lngNum = parseFloat(lng);

                    // Create a map instance
                    const map = L.map(mapElement, {
                        center: [latNum, lngNum],
                        zoom: 15
                    });

                    // Add the tile layer
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '© OpenStreetMap contributors'
                    }).addTo(map);

                    // Add scale control
                    L.control.scale().addTo(map);

                    // Add a marker at the terrain location
                    L.marker([latNum, lngNum]).addTo(map)
                        .bindPopup("<strong>{{ terrain.Nom }}</strong><br>{{ terrain.TypeSurface }}<br>{{ terrain.Prix }} TND")
                        .openPopup();

                    // Force a map resize after a short delay
                    setTimeout(function() {
                        map.invalidateSize();
                    }, 100);
                }
            } catch (error) {
                console.error('Error initializing map:', error);
            }
        }, 500); // Delay initialization to ensure DOM is fully loaded
    });
</script>
{% endblock %}
