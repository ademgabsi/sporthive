{% extends 'Back/base.html.twig' %}

{% block title %}Modifier le terrain - Administration{% endblock %}

{% block body %}
    <div class="dashboard-container">
        <div class="dashboard-header">
            <h1 class="dashboard-title">Modifier le terrain</h1>
            <p class="dashboard-subtitle">Modifiez les détails du terrain #{{ terrain.idTerrain }}</p>
        </div>

        <div class="card">
            <div class="card-body">
                {{ form_start(form, {'attr': {'class': 'terrain-form', 'id': 'terrain-form', 'enctype': 'multipart/form-data'}}) }}

                <div class="form-group">
                    {{ form_label(form.nom) }}
                    {{ form_widget(form.nom, {'attr': {'class': 'input'}}) }}
                    {{ form_errors(form.nom) }}
                </div>

                <div class="form-group">
                    {{ form_label(form.typeSurface) }}
                    {{ form_widget(form.typeSurface, {'attr': {'class': 'input'}}) }}
                    {{ form_errors(form.typeSurface) }}
                </div>

                <div class="form-group full-width">
                    {{ form_label(form.localisation) }}

                    <div class="map-search-container">
                        <input type="text" id="location-search" placeholder="Rechercher une adresse...">
                        <button type="button" id="search-button">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>

                    <div id="map"></div>
                    {{ form_widget(form.localisation, {'attr': {'class': 'd-none'}}) }}
                    {{ form_errors(form.localisation) }}

                    <div class="map-instructions">
                        <p><i class="fas fa-info-circle"></i> Cliquez sur la carte pour placer un marqueur ou recherchez une adresse</p>
                        <p><i class="fas fa-arrows-alt"></i> Vous pouvez déplacer le marqueur pour ajuster la position</p>
                    </div>
                </div>

                <div class="form-group">
                    {{ form_label(form.prix) }}
                    {{ form_widget(form.prix, {'attr': {'class': 'input'}}) }}
                    {{ form_errors(form.prix) }}
                </div>

                <div class="form-group full-width">
                    {{ form_label(form.imageTer) }}
                    {{ form_widget(form.imageTer, {'attr': {'class': 'input'}}) }}
                    {{ form_errors(form.imageTer) }}
                </div>

                <div class="form-actions">
                    <a href="{{ path('app_terrain_index') }}" class="btn btn-cancel">
                        <i class="fas fa-arrow-left"></i> Retour à la liste
                    </a>
                    <button type="submit" class="btn btn-save">
                        <i class="fas fa-save"></i> Enregistrer
                    </button>
                </div>

                {{ form_end(form) }}
            </div>
        </div>

        {{ include('terrain/back/_delete_form.html.twig') }}
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin=""/>
    <style>
        .dashboard-container {
            padding: 2rem;
            max-width: 1000px;
            margin: 0 auto;
        }

        .dashboard-header {
            margin-bottom: 2rem;
            padding-bottom: 0.8rem;
            border-bottom: 2px solid #e0e0e0;
        }

        .dashboard-title {
            font-size: 2rem;
            font-weight: 700;
            color: #2d2d2d;
            margin-bottom: 0.3rem;
        }

        .dashboard-subtitle {
            font-size: 1rem;
            color: #6c757d;
        }

        .card {
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);
            margin-bottom: 2rem;
        }

        .card-body {
            padding: 2rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .input {
            width: 100%;
            padding: 0.75rem 1rem;
            font-size: 1rem;
            border: 1px solid #ced4da;
            border-radius: 8px;
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 1px solid #e0e0e0;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
            font-weight: 600;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-cancel {
            background-color: #f8f9fa;
            color: #6c757d;
            border: 1px solid #dee2e6;
        }

        .btn-cancel:hover {
            background-color: #e9ecef;
        }

        .btn-save {
            background-color: #3f51b5;
            color: white;
            border: none;
        }

        .btn-save:hover {
            background-color: #303f9f;
        }

        /* Map styles */
        #map {
            height: 400px;
            border-radius: 8px;
            margin-bottom: 15px;
            border: 1px solid #ced4da;
            transition: border-color 0.3s ease;
        }

        #map:hover {
            border-color: #3f51b5;
        }

        .map-search-container {
            display: flex;
            margin-bottom: 15px;
        }

        #location-search {
            flex-grow: 1;
            padding: 0.75rem 1rem;
            border: 1px solid #ced4da;
            border-radius: 8px 0 0 8px;
            font-size: 1rem;
        }

        #search-button {
            background-color: #3f51b5;
            color: white;
            border: none;
            border-radius: 0 8px 8px 0;
            padding: 0 15px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        #search-button:hover {
            background-color: #303f9f;
        }

        .map-instructions {
            margin-top: 10px;
            font-size: 0.9rem;
            color: #6c757d;
        }

        @media (max-width: 768px) {
            .dashboard-container {
                padding: 1rem;
            }

            .card-body {
                padding: 1.5rem;
            }

            .form-actions {
                flex-direction: column;
            }

            .btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
        crossorigin=""></script>
<script>
    // Direct inline script to initialize the map
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Direct inline map script running');

        setTimeout(function() {
            try {
                const mapElement = document.getElementById('map');
                if (!mapElement) {
                    console.error('Map element not found');
                    return;
                }

                if (typeof L === 'undefined') {
                    console.error('Leaflet not loaded');
                    alert('La bibliothèque Leaflet n\'a pas été chargée correctement. Veuillez rafraîchir la page.');
                    return;
                }

                initMap();

                function initMap() {
                    console.log('Initializing map...');
                    // Create a map instance
                    const map = L.map(mapElement, {
                        center: [36.8065, 10.1815],
                        zoom: 13
                    });

                    // Add the tile layer
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '© OpenStreetMap contributors'
                    }).addTo(map);

                    // Add scale control
                    L.control.scale().addTo(map);

                    const input = document.querySelector('[name="terrain[localisation]"]');
                    let marker = null;

                    // Function to update marker position
                    function updateMarkerPosition(latlng) {
                        if(marker) map.removeLayer(marker);
                        marker = L.marker(latlng, {draggable: true}).addTo(map);

                        // Update input value when marker is placed
                        if (input) {
                            input.value = `${latlng.lat.toFixed(6)},${latlng.lng.toFixed(6)}`;
                        }

                        // Update input value when marker is dragged
                        marker.on('dragend', function(e) {
                            const position = marker.getLatLng();
                            if (input) {
                                input.value = `${position.lat.toFixed(6)},${position.lng.toFixed(6)}`;
                            }
                        });
                    }

                    // Handle map click to place marker
                    map.on('click', function(e) {
                        updateMarkerPosition(e.latlng);
                    });

                    // Initialize with existing value
                    if(input && input.value) {
                        console.log('Existing coordinates:', input.value);
                        const [lat, lng] = input.value.split(',');
                        if(!isNaN(parseFloat(lat)) && !isNaN(parseFloat(lng))) {
                            const latlng = L.latLng(parseFloat(lat), parseFloat(lng));
                            console.log('Setting initial marker at:', latlng);
                            updateMarkerPosition(latlng);
                            map.setView(latlng, 15);
                        } else {
                            console.error('Invalid coordinates format:', input.value);
                        }
                    } else {
                        console.log('No existing coordinates found');
                    }

                    // Handle search functionality
                    const searchInput = document.getElementById('location-search');
                    const searchButton = document.getElementById('search-button');

                    if(searchInput && searchButton) {
                        searchButton.addEventListener('click', searchLocation);
                        searchInput.addEventListener('keypress', function(e) {
                            if(e.key === 'Enter') {
                                e.preventDefault();
                                searchLocation();
                            }
                        });
                    }

                    function searchLocation() {
                        if (!searchInput) return;

                        const query = searchInput.value.trim();
                        if(query.length > 0) {
                            // Use Nominatim for geocoding
                            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`)
                                .then(response => response.json())
                                .then(data => {
                                    if(data && data.length > 0) {
                                        const result = data[0];
                                        const latlng = L.latLng(parseFloat(result.lat), parseFloat(result.lon));
                                        updateMarkerPosition(latlng);
                                        map.setView(latlng, 15);
                                    } else {
                                        alert('Aucun résultat trouvé pour cette recherche.');
                                    }
                                })
                                .catch(error => {
                                    console.error('Erreur de recherche:', error);
                                    alert('Erreur lors de la recherche. Veuillez réessayer.');
                                });
                        }
                    }

                    // Force a map resize after a short delay
                    setTimeout(function() {
                        map.invalidateSize();
                    }, 100);
                }
            } catch (error) {
                console.error('Error initializing map:', error);
            }
        }, 500); // Delay initialization to ensure DOM is fully loaded
    });
</script>
{% endblock %}
